@model CreatePhotoShootDTO

@{
    List<DateTime> remainingDates = Model.RemainingDates ?? new();
    Dictionary<DateOnly, IEnumerable<TimeSlot>> calendar = Model.Calendar ?? new();
}

<input type="hidden" id="priceForDistance"/>
<div class="container">
    
    <form asp-action="Reserve" method="post">
        <div asp-validation-summary="All" class="text-danger"></div>

        <input type="hidden" asp-for="IdentityUserId" />
        <input type="hidden" asp-for="ReservationDate" />
        <input type="hidden" asp-for="ReservationTime" />
        <input type="hidden" asp-for="SelectedSettlementId" />
        <input type="hidden" asp-for="IsPlaceSelected" />
        <input type="hidden" asp-for="IsPlace" />
        <input type="hidden" asp-for="FuelPrice" />
        @*not used for now*@
        @*<input type="hidden" asp-for="SettlementName" />*@

        @*<div class="row mt-5">
            <div class="col-12 text-center">
                <h1>Резервация</h1>
            </div>
        </div>*@
        <div class="row mt-5">
            <div class="col-12">
                <h4>Вашите данни</h4>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-12 col-md-6 col-lg-3 form-group">
                <label asp-for="PhotoShootType" class="required"></label>
                <select asp-for=PhotoShootType asp-items="@(Html.GetEnumSelectList<PhotoShootType>())" class="form-control" required></select>
                <span asp-validation-for="PhotoShootType" class="text-danger"></span>
            </div>
            <div class="col-12 col-md-6 col-lg-3 form-group">
                <label asp-for="PersonFirstName" class="required"></label>
                <input asp-for="PersonFirstName" class="form-control" required />
                <span asp-validation-for="PersonFirstName" class="text-danger"></span>
            </div>
            <div class="col-12 col-md-6 col-lg-3 form-group">
                <label asp-for="PersonLastName" class="required"></label>
                <input asp-for="PersonLastName" class="form-control" required />
                <span asp-validation-for="PersonLastName" class="text-danger"></span>
            </div>
            <div class="col-12 col-md-6 col-lg-3 form-group">
                <label asp-for="PersonPhone" class="required"></label>
                <input asp-for="PersonPhone" class="form-control" required />
                <span asp-validation-for="PersonPhone" class="text-danger"></span>
            </div>
        </div>
        <div class="row">
            <!--<div class="col-12 col-md-6 col-lg-3 form-group">
                <label asp-for="ReservationDate"></label>
                <input asp-for="ReservationDate" class="form-control" />
                <span asp-validation-for="ReservationDate" class="text-danger"></span>
            </div>-->
            <div class="col-12 form-group" id="photo-shoot-type-description">
                <label asp-for="PhotoShootTypeDescription" class="required"></label>
                <textarea asp-for="PhotoShootTypeDescription" cols="20" rows="6" class="form-control photoshoot-other-description"></textarea>
                <span asp-validation-for="PhotoShootTypeDescription" class="text-danger"></span>
            </div>
        </div>
        <div class="row mt-5">
            <div class="col-12">
                <h4>Място</h4>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-12 col-md-6 col-lg-6 form-group is-decided-by-us">
                <input asp-for="IsDecidedByUs"/>
                <label asp-for="IsDecidedByUs"></label>
            </div>
        </div>
        <div class="row mt-3 row-toggle-places">
            <div class="col-12 col-md-6 col-lg-4">
                <input type="button" id="showPopularPlaces" style="display:none" class="btn btn-secondary btn-sm" value="Покажи популярни места" />
                <input type="button" id="hidePopularPlaces" style="display:none" class="btn btn-secondary btn-sm" value="Скрий популярните места" />
            </div>
        </div>
        <div class="row row-decided-by-us-info" style="display:none">
            <div class="col-12">
                <h6>Ще изберем подходящо място в околността на населеното място, което сте избрали.</h6>
            </div>
        </div>
        <div class="place-container mt-3">
            <div class="row">
                <div class="col-12 col-md-6 col-lg-6 form-group">
                    <input type="hidden" id="RegionId" />
                    <label for="Region" class="required">Област</label>
                    <select id="Region" class="form-control" asp-items="@(new SelectList(Model.ServicedRegions, "Id", "Name"))" required>
                        <option value="0" selected></option>
                    </select>
                </div>
                <div class="col-12 col-md-6 col-lg-6 form-group settlement" style="display:none">
                    <label for="Settlement" class="required">Населено място</label>
                    <input type="hidden" id="SettlementId" />
                    <select id="Settlement" class="form-control"></select>
                    <!--<span class="decided-by-us-settlement-info text-warning" style="display:none"><i>Това не е задължително</i></span>-->
                </div>
                <div class="col-12 col-md-6 col-lg-6 form-group popular-places" style="display:none">
                    <label for="PopularPlaces" class="required">Популярни места</label>
                    <select id="PopularPlaces" class="form-control"></select>
                    <!--<span class="decided-by-us-settlement-info text-warning" style="display:none"><i>Това не е задължително</i></span>-->
                </div>
            </div>
            <div class="place-addition-info" style="display:none">
                <div class="row">
                    <div class="col-12 form-group user-place">
                        <label asp-for="UserPlace" class="required"></label>
                        <input asp-for="UserPlace" class="form-control" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-12 form-group google-maps-link">
                        <label asp-for="GoogleMapsLink"></label>
                        <span class="text-warning"><i>Това не е задължително, но е силно препоръчително</i></</span>
                        <input asp-for="GoogleMapsLink" class="form-control" />
                        <br />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12 col-price" style="display:none">
                    <label><b>Разход за пътни</b></label>
                    <br />
                    <p id="priceDesciption">Тъй като избраното населено място се намира на разстояние по-голямо от 20 км от нас, това ще ви струва допълнителни <b><i><span id="price"></span></i></b>лв. (Такса пътни @(DefaultValue.TripTax).00 лв. + @(DefaultValue.FuelPriceByKilometer) лв. за всеки километър)</p>
                </div>
            </div>
        </div>
        <div class="dates-container" style="display:none">
            <div class="row mt-5">
                <div class="col-12">
                    <h4>Дата и час</h4>
                </div>
            </div>
            @*<div class="row mt-5" id="row-dates-no-weather" style="display:none;">
                <div class="col-12 scrollmenu" id="dates-list">
                    <div id="date-buttons-slider">
                        @foreach(KeyValuePair<DateOnly, IEnumerable<TimeSlot>> calendarKVP in calendar)
                        {
                            <div class="card text-center btn-date btn-date-simple text-white @(calendarKVP.Value.FirstOrDefault().IsAvailable ? "bg-success" : "bg-danger")" id="date-button-simple">
                                <div class="card-header card-header-date">
                                    <h6 class="date-text">@calendarKVP.Key.ToString("dd.MM")</h6>
                                </div>
                                <div class="card-body">
                                    <span>@(calendarKVP.Value.FirstOrDefault().IsAvailable ? Html.Raw("<i class=\"fa-solid fa-check fa-lg\"></i>") : Html.Raw("<i class=\"fa-solid fa-xmark fa-lg\"></i>"))</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>*@
            <div class="row mt-5" id="row-dates-weather" style="display:none;">
                <div class="col-12 scrollmenu" id="dates-list">
                    <div id="date-buttons-slider">
                        @foreach (KeyValuePair<DateOnly, IEnumerable<TimeSlot>> calendarKVP in calendar)
                        {
                            <div class="card card-weather text-center btn-date btn-date-simple text-white @(calendarKVP.Value.FirstOrDefault().IsAvailable ? "bg-success" : "bg-danger")" id="date-button-simple">
                                <div class="card-header card-header-date">
                                    <h6 class="date-text">@calendarKVP.Key.ToString("dd.MM")</h6>
                                </div>
                                <div class="card-body card-body-weather text-center" style="background: @(calendarKVP.Value.FirstOrDefault().IsAvailable ? Html.Raw("#8dba8d") : Html.Raw("#f57976"))">
                                    <h5 class="temperatureCurrent"></h5>
                                    <div class="icon"></div>
                                    <p class="forecastText">Нямаме информация за времето</p>
                                    <p class="precipitation"></p>
                                </div>
                                <div class="card-footer">
                                    <span>@(calendarKVP.Value.FirstOrDefault().IsAvailable ? Html.Raw("<i class=\"fa-solid fa-check fa-lg\"></i>") : Html.Raw("<i class=\"fa-solid fa-xmark fa-lg\"></i>"))</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12 hours-container mx-auto text-center" id="hours-container" style="display:none">
                    <hr />
                    @foreach (TimeSlot slot in Model?.AllTimeSlots ?? throw new NullReferenceException("Time slots are null"))
                    {
                        <button type="button" class="btn @(slot.IsAvailable ? "btn-success" : "btn-secondary") btn-lg btn-time-slot" id="time-slot">
                            @(slot.Time.Hour < 10 ? $"0{slot.Time.Hour}" : slot.Time.Hour):@(slot.Time.Minute == 0 ? "00" : "30");
                        </button>
                    }
                </div>
            </div>
            <div class="row row-total-price my-5">
                <div class="col-12 mt-5 text-center ">
                    <h1>Цена: <span id="total-price"></span> <span id="currency"> лв</span></h1>
                            
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-12">
                    <div class="form-group">
                        <input asp-for="DoNotUploadPhotos" />
                        <label asp-for="DoNotUploadPhotos"></label>
                    </div>
                </div>
            </div>
            <div class="row delivery-method" style="display:none">
                <div class="col-12">
                    <div class="form-group">
                        <label asp-for="PhotoDeliveryMethod" class="required"></label>
                        <select asp-for="PhotoDeliveryMethod" asp-items="@(Html.GetEnumSelectList<PhotoDeliveryMethod>())" class="form-control">
                            <option value=""></option>
                        </select>
                    </div>
                </div>
                <div class="col-12 col-photo-delivery" style="display:none">
                    <div class="form-group">
                        <label asp-for="PhotoDeliveryAddress" class="required"></label>
                        <input asp-for="PhotoDeliveryAddress" class="form-control" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <span class="alert-text text-muted">*С избирането на опцията „<b>Не желая снимките ми да се качват тук</b>“ отказвате снимките Ви да бъдат качени на уебсайта на DreamPix. Ще получите снимките по метода, който сте избрали отгоре.</span>
                </div>
            </div>
            <div class="row mt-2">
                <div class="col-12">
                    <span class="alert-text text-muted">*С натискането на бутона „<b>Резервирай</b>“ се съгласявате да изполваме въведетите от вас данни. Те ще бъдат използвани единствено за целите на работния процес на DreamPix.</span>
                </div>
            </div>
        </div>
        <div class="row mt-5">
            <div class="col-12 text-center">
                <button type="submit" class="btn btn-outline-secondary btn-lg" id="btn-book" disabled>Резервирай</button>
            </div>
        </div>
    </form>
</div>
 

<style>
    .left-column {
        height: 100vh;
        overflow-y: auto;
        border-right: 1px solid #ededed;
        padding-right: 30px;
    }

    .right-column {
        height: 100vh;
        overflow-y: auto;
    }
    .required:after {
        content: " *";
        color: red;
    }
    #dates-list {
        overflow: scroll;
    }

    #date-buttons-slider {
        position: relative;
        display: flex;
        flex-flow: row nowrap;
        padding: 10px;
    }

    #date-button-simple, .btn-date-weather {
        flex: 0 0 auto;
        background: #f2f2f2;
        color: #1a1a1a;
        margin-right: 10px;
        border: none;
        border-radius: 10px;
        box-shadow: 0px 0px 10px -2px #8cb0db;
        transform: unset;
        transition: .4s;
    }

    #date-button-simple {
        min-height: 100px;
    }
    
    .btn-date-weather {
        max-width: 300px;
        min-height: 300px;
    }

    #date-button-simple:hover, .btn-date-weather:hover {
        box-shadow: 0px 0px 10px 2px #394859;
        transform: scale(1.02);
        transition: .4s;
    }

    .hours-container{
        margin: 80px 0;
    }

    .hours-container button {
        margin: 5px;
    }
    
    .card{
        width: 148px;
    }

    .btn-date-weather .card-body .icon {
        background-repeat: no-repeat;
        background-position: center;
        height: 50px;
        width: 80px;
        margin: 10px auto;
    }


    .ui-autocomplete{
        font-family: "Helvetica";
        border-radius: 2px;
        border: none;
        background: #fff;
        transition: .2s;
        box-shadow: 0px 0px 10px -2px #394859;
        padding: 5px;

    }

    .ui-menu-item-wrapper{
        color: #1a1a1a;
        font-weight: normal;
    }

    .ui-menu-item-wrapper:hover{
        font-weight: normal;
        color: #1a1a1a;
        background: #f7f7f7;
        border:none;
    }

    #UploadPhotos{
        transform: scale(1.2);
        margin-right: 5px;
    }

    .alert-text{
        font-style: italic;
    }

</style>

<script>
    $(document).ready(function(){
        let lastClickedDateBtn = null;
        let lastClickedTimeSlotBtn = null;

        $("#PhotoDeliveryMethod").change(function () {
            //2 is USB, 3 is CD 
            if ($('#PhotoDeliveryMethod').find(":selected").val() == 2 ||
                    $('#PhotoDeliveryMethod').find(":selected").val() == 3) {
                $(".col-photo-delivery").css("display", "block");
                $("#PhotoDeliveryAddress").prop('required', true);
            }
            else{
                $(".col-photo-delivery").css("display", "none");
                $("#PhotoDeliveryAddress").prop('required', false);
                $("#PhotoDeliveryAddress").val('');
            }
        });

        $("#DoNotUploadPhotos").change(function () {
            if (this.checked) {
                $(".delivery-method").css("display", "block");
                $("#PhotoDeliveryMethod").prop('required', true);
            }
            else{

                $(".delivery-method").css("display", "none");
                $("#PhotoDeliveryMethod").val('');
                $("#PhotoDeliveryMethod").prop('required', false);
            }
        });

        $("#IsDecidedByUs").change(function () {
            if (this.checked) {

                $("#Settlement").val('');
                $(".row-decided-by-us-info").css("display", "block");
                $(".row-toggle-places").css("display", "none");
                //$(".decided-by-us-settlement-info").css("display", "unset");
                //$("#row-dates-no-weather").css("display", "flex");
                $("#row-dates-weather").css("display", "flex");
                //$(".row-dates-weather-remaining").css("display", "none");
                $(".place-addition-info").css("display", "none");
            }
            else {
                $(".row-decided-by-us-info").css("display", "none");
                $(".row-toggle-places").css("display", "block");
                //$(".decided-by-us-settlement-info").css("display", "none");
                //$("#row-dates-no-weather").css("display", "none");
                //$("#row-dates-weather").css("display", "flex");
                //$(".row-dates-weather-remaining").css("display", "flex");
                $(".place-addition-info").css("display", "block");
            }

            updatePrice();
        });

        $("#Region").change(function () {
            updatePrice();
            $("#PopularPlace").val('');
            if ($("#IsDecidedByUs").prop('checked')) {
            }
            else{
                $("#Settlement").val('');
            }
            $("#RegionId").val($(this).val());
            $(".dates-container").css("display", "block");
            
            if (!($("#showPopularPlaces").is(":visible")) && !($("#hidePopularPlaces").is(":visible"))) {
                $("#hidePopularPlaces").css("display", "none");
                $("#showPopularPlaces").css("display", "block");
                getSettlementsByRegion($("#Region option:selected").text());
            }

            else if (!($("#showPopularPlaces").is(":visible")) && ($("#hidePopularPlaces").is(":visible"))) {
                $("#showPopularPlaces").css("display", "none");
                $("#hidePopularPlaces").css("display", "block");
                getPopularPlacesByRegion($("#Region option:selected").text());
            }
            else{
                $("#hidePopularPlaces").css("display", "none");
                $("#showPopularPlaces").css("display", "block");
                getSettlementsByRegion($("#Region option:selected").text());
            }
        });

        /*$("#Settlement").change(function () {
            updatePrice();
            getForecast($(this).val(), true);
            //not used for now
            //$("#SettlementName").val($(this).val());
            
            $("#row-dates-weather").css("display", "flex");
            
            if ($("#IsDecidedByUs").prop('checked') == false) {
                $(".place-addition-info").css("display", "block");
                $("#row-dates-weather").css("transition", ".4s");
                //$(".row-dates-weather-remaining").css("transition", ".4s");
                //$(".row-dates-weather-remaining").css("display", "flex");
            }
        });*/

        $(".card-weather").click(function () {
            $(".card-weather").css("box-shadow", "unset");
            $(".btn-date-simple").css("background", "unset");
            $(".btn-date-simple").css("color", "unset");
            $(this).css("box-shadow", "0px 0px 15px 2px #6cab65");
        });

        $(".btn-date-simple").click(function () {
            $(".btn-date").each(function () {
                $(this).css("background", "unset");
                $(this).css("color", "unset");
            });
            $(this).css("background", "#a2cc93");
            $(this).css("color", "#fff");
            $(".card-weather").css("box-shadow", "unset");
        });

        $(".btn-date").click(function () {
            //reset the styles for the last clicked button
            //bg-success is set as default because style is change for available buttons only
            if(lastClickedDateBtn != null){
                lastClickedDateBtn.removeClass('bg-primary');
                lastClickedDateBtn.addClass('bg-success');
            }

            if ($(this).hasClass('bg-success')){
                $(this).removeClass("bg-success");
                $(this).addClass("bg-primary");
            }
            
            //set the currect clicked button as last clicked
            lastClickedDateBtn = $(this);

            showTimeSlots($(this).find(".card-header h6").html());
        });

        $(document).on("click", ".btn-date", function () {
            $(".reservation-time").css("display", "block");
            
        });

        $(document).on("click", ".btn-time-slot", function (event) {
            event.preventDefault();

            //reset the styles for the last clicked button
            //bg-success is set as default because style is change for available buttons only
            if (lastClickedTimeSlotBtn != null) {
                lastClickedTimeSlotBtn.removeClass('btn-primary');
                lastClickedTimeSlotBtn.addClass('btn-outline-success');
            }

            if ($(this).hasClass("btn-outline-success")) {
                $("#ReservationTime").val($(this).text());
                $("#btn-book").prop("disabled", false);
                $(this).removeClass('btn-outline-success');
                $(this).addClass('btn-primary');
            }
            
            else {
                alert("Избраният час е зает");
                $("#btn-book").prop("disabled", true);
            }

            //set the currect clicked button as last clicked
            lastClickedTimeSlotBtn = $(this);

            $(".book-container").css("display", "block");
        });

        setDate();
        
        //hide description on page load
        $("#photo-shoot-type-description").css("display", "none");

        $("#PhotoShootType").change(function () {
            let option = $('#PhotoShootType').find(":selected").val();
            
            //10 is {Other}
            if (option == 10) {
                $("#photo-shoot-type-description").css("display", "block");
                $("#PhotoShootTypeDescription").attr("required", "required");
            }

            else{
                $("#PhotoShootTypeDescription").removeAttr("required");
                $("#photo-shoot-type-description").css("display", "none");
            }

            checkPhotoShootTypeDescriptionEmpty();
            updatePrice();
        });

        $("#showPopularPlaces").click(function(){
            $("#showPopularPlaces").css("display", "none");
            $("#hidePopularPlaces").css("display", "block");
            getPopularPlacesByRegion($("#Region option:selected").text());
        });

        $("#hidePopularPlaces").click(function () {
            $("#showPopularPlaces").css("display", "block");
            $("#hidePopularPlaces").css("display", "none");
            getSettlementsByRegion($("#Region option:selected").text());
        });
        checkBookedDates();
        addasterisk();
    });


    function addasterisk(inputId) {
        let id = "label#" + inputId;
        console.log($(id).html());
    }

    function setDate(){
        $(".btn-date").click(function () {
            let currentDate = new Date();
            let selectedDay = formatSelectedDate($(this).find(".date-text").text());
            $('input[name="ReservationDate"]').val(selectedDay);
        });
    }

    function formatSelectedDate(selectedDate) {
        let selectedDateSplit = selectedDate.split('.');
        return `${new Date().getUTCFullYear()}-${selectedDateSplit[1]}-${selectedDateSplit[0]}`;
    }

    function formatToBulgarianDate(selectedDate) {
        let selectedDateSplit = selectedDate.split('-');
        return `${selectedDateSplit[0]}.${selectedDateSplit[1]}.${selectedDateSplit[2]}`;
    }
    
    function getMonthAndDay(date) {
        let selectedDateSplit = date.split('.');
        return `${selectedDateSplit[2]}.${selectedDateSplit[1]}`;
    }

    function showTimeSlots(selectedDate){

        let selectedDateFormated = formatSelectedDate(selectedDate);
        let calendar = @Html.Raw(Json.Serialize(calendar));
        let isAvailable = false;
        let time = '';
        let timeSubstring = '';

        console.log(calendar);

        $('#hours-container').empty();
        $('#hours-container').css("display", "block");
        for (let i = 0; i < calendar[selectedDateFormated]?.length; i++) {
            isAvailable = calendar[selectedDateFormated][i]?.isAvailable;
            time = calendar[selectedDateFormated][i]?.time;
            timeSubstring = time.substring(0, time.length - 3);
            
            $('#hours-container').append(`<button class='btn btn-${isAvailable ? 'outline-success' : 'outline-danger'} btn-lg btn-time-slot'>${timeSubstring}</button>`);
        }
    }

    function formatTimeOnly(timeOnlyList){
        let timeOnlyListFormated = [];

        for(let i = 0; i < timeOnlyList.length; i++){
            timeOnlyListFormated.push(timeOnlyList[i].slice(0, -3))
        }

        return timeOnlyListFormated;
    }

    function checkPhotoShootTypeDescriptionEmpty(){
        let selected = $('#PhotoShootType').find(":selected").val();
        //10 is "Other"
        if (selected == 10) {
            $("#PhotoShootTypeDescription").prop("required", true);
        }
    }

    function getForecast(settlementId, isSettlement) {
        let forecastURL = isSettlement ? "@Url.Action("forecast", "Weather")" : "@Url.Action("forecastForPlace", "Weather")";
        console.log(isSettlement);
        console.log(forecastURL);
        var request = $.ajax({
            url: forecastURL,
            method: "GET",
            data: { settlementId: settlementId },
            success: function (response) {
                let json = JSON.parse(JSON.stringify(response));

                $(".card-weather").each(function (i) {
                    let cardBody = $(this).find(".card-body-weather");
                    cardBody.find(".icon").css("background-image", `url(${json.forecast.forecastDays[i].day.condition.icon})`);
                    cardBody.find("h5").text(json.forecast.forecastDays[i].day.averageTemperature != 0 ? (Math.round(json.forecast.forecastDays[i].day.maxTemperature) + 'C°') : '');
                    cardBody.find(".forecastText").text(json.forecast.forecastDays[i].day.condition.text);
                    cardBody.find(".precipitation").text('Валежи: ' + json.forecast.forecastDays[i].day.totalPrecipitation + '%');
                    i++;

                    if(i == 3){
                        return false;
                    }
                });
            },
            error: function (response) {
                console.log("error");
                console.log(response);
            }
        });
    }

    //commented because autocomolete data comes from the database now
    /*function getAutocomplete(query) {
        var request = $.ajax({
            url: "@Url.Action("autocomplete", "Weather")",
            method: "GET",
            data: { query: query },
            success: function (response) {
                $("#Settlement").autocomplete({
                    source: response.map(r => r.name)
                });
                return response;
            },
            error: function (response) {
                console.log("error");
                console.log(response);
            }
        });
    }*/

    function getPopularPlacesByRegion() {
        $(".settlement").css("display", "none");
        $(".popular-places").css("display", "block");
        $('#PopularPlaces').selectize()[0].selectize.destroy();
        var request = $.ajax({
            url: "@Url.Action("popularPlacesByRegion", "Place")",
            data: { "regionId": $("#Region").find(":selected").val() },
            method: "GET",
            success: function (response) {
                let json = JSON.parse(JSON.stringify(response));
                $("#PopularPlaces").selectize({
                    respect_word_boundaries: false,
                    plugins: ["restore_on_backspace", "clear_button"],
                    delimiter: " - ",
                    persist: false,
                    maxItems: 1,
                    valueField: "id",
                    labelField: "name",
                    searchField: ["name"],
                    options: response,
                    onChange: function (value) {
                        updatePrice();
                        console.log('value: ' + value);
                        getForecast(value, false);
                        $("#row-dates-weather").css("display", "flex");
                        $("#IsPlace").val(true);
                        $("#SelectedSettlementId").val(value);
                        $("#IsPlaceSelected").val(true);
                        console.log('value ' + value);
                        /*if ($("#IsDecidedByUs").prop('checked') == false) {
                            $(".place-addition-info").css("display", "block");
                            $("#row-dates-weather").css("transition", ".4s");
                            $("#row-dates-weather").css("display", "flex");
                        }*/
                    }
                });
            }
        });
    }

    function getSettlementsByRegion(region) {
        $(".settlement").css("display", "block");
        $(".popular-places").css("display", "none");
        //else destroy settlements list
        if (region != '') {
            //destroy Selectize before repopulating the select list with new data
            $('#Settlement').selectize()[0].selectize.destroy();
            $.ajax({
                url: "@Url.Action("settlementsByRegion", "Settlement")",
                method: "GET",
                data: { region: region },
                success: function (response) {
                    $("#Settlement").selectize({
                        respect_word_boundaries: false,
                        plugins: ["restore_on_backspace", "clear_button"],
                        delimiter: " - ",
                        persist: false,
                        maxItems: 1,
                        valueField: "id",
                        labelField: "name",
                        searchField: ["name"],
                        options: response,
                        onChange: function (value) {
                            updatePrice();
                            console.log('hello settlement');
                            getForecast(value, true);
                            $("#IsPlace").val(false);
                            $("#SelectedSettlementId").val(value);
                            //not used for now
                            //$("#SettlementName").val($(this).val());

                            if ($("#IsDecidedByUs").prop('checked') == false) {
                                $(".place-addition-info").css("display", "block");
                                //$(".row-dates-weather-remaining").css("transition", ".4s");
                                //$(".row-dates-weather-remaining").css("display", "flex");
                            }
                            $("#row-dates-weather").css("transition", ".4s");
                            $("#row-dates-weather").css("display", "flex");
                        }
                    });
                },
                error: function (response) {
                    console.log("error");
                    console.log(response);
                },
            });
        }
        else {
            //destroy selectize if no region is selected
            $('#Settlement').selectize()[0].selectize.destroy();
        }
        
    }
    
    function calculatePriceByDistance(settlement, isRegion = false) {
        let regionId = $("#Region").find(":selected").val();
        var request = $.ajax({
            contentType: 'application/json',
            url: "@Url.Action("fuelPrice", "Calculations")",
            traditional: true,
            method: "GET",
            data: { 'regionId': regionId },
            success: function (response) {
                calculateTotalPrice($("#PhotoShootType").find(":selected").val(), response);
                $("#price").text(response);
                $("#FuelPrice").val(response);
                
                
                if (response > 0 && ($("#IsDecidedByUs").is(":checked"))) {
                    $(".col-price").css("display", "block");
                }
                else{
                    $(".col-price").css("display", "none");
                }
            },
            error: function (response) {
                console.log("error");
                console.log(response);
            }
        });
    }

    function calculateTotalPrice(photoshootType, fuelPrice){
        var request = $.ajax({
            contentType: 'application/json',
            url: "@Url.Action("photoshootPrice", "Calculations")",
            traditional: true,
            method: "GET",
            data: { 'photoshootType': photoshootType, 'fuelPrice': fuelPrice },
            success: function (response) {
                price = response;

                if ($("#PhotoShootType").find(":selected").val() == 7 || $("#PhotoShootType").find(":selected").val() == 10) {
                    $("#total-price").html("По договаряне");
                    $("#currency").css("display", "none");
                }
                else{
                    $("#total-price").html(response);
                    $("#currency").css("display", "inline");
                }

                $(".row-total-price").css("display", "block");
            },
            error: function (response) {
                console.log("error");
                console.log(response);
            }
        });
    }

    function updatePrice(){
        $("#total-price").html('0');
        console.log('updateprice');
        //hide curreny by default
        $("#currency").css("display", "none");

        let photoshootType = $("#PhotoShootType").find(":selected").val();

        /*if ($("#IsDecidedByUs").is(":checked")) {
            if ($("#Settlement").val() == null || $("#Settlement").val() == '') {
                let fuelPriceWhenDecidedByUs = calculatePriceByDistance($("#Region option:selected").text(), true);
                calculateTotalPrice(photoshootType, fuelPriceWhenDecidedByUs);
            }
            else{
                let fuelPriceWhenDecidedByUser = calculatePriceByDistance($("#Settlement").val(), false);
                calculateTotalPrice(photoshootType, fuelPriceWhenDecidedByUser);
            }
        }*/

        if ($("#IsDecidedByUs").is(":checked")) {
            let fuelPrice = calculatePriceByDistance($("#Region option:selected").text(), false);
            
            if ($("#Region").val() != 0) {
                $("#currency").css("display", "inline");
            }

            calculateTotalPrice(photoshootType, fuelPrice);
        }
        else{
            let fuelPrice = calculatePriceByDistance($("#Region option:selected").text(), false);
            
            if ($("#Settlement").val() != null && $("#Settlement").val() != '') {
                $("#currency").css("display", "inline");
            }

            calculateTotalPrice(photoshootType, fuelPrice);
        }
    }

    function checkBookedDates() {
        let calendar = @Html.Raw(Json.Serialize(calendar));
        Object.keys(calendar).forEach(value => {
            let monthAndDay = getMonthAndDay(formatToBulgarianDate(value));
            
            if (monthAndDay) {

            }
        });
        
    }

</script>